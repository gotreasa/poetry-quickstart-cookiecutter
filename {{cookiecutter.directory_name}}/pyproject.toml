[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.description}}"
authors = ["{{cookiecutter.author}} <{{cookiecutter.email}}>"]
license = "{{cookiecutter.license}}"
repository = 'https://github.com/petereon/{{cookiecutter.project_name}}'
readme = 'README.md'
keywords = ["python"]
classifiers = [
    'License :: OSI Approved :: {{cookiecutter.license}} License',
    'Programming Language :: Python :: 3',
]
packages = [{ include = "{{cookiecutter.project_name}}", from = "src" }]


[tool.poe.tasks]
add = { shell = "poetry add" }
install = { shell = "poetry install" }
build = { shell = "poetry build" }
clean = { shell = "rm -R ./dist .pytest_cache .mypy_cache &> /dev/null" }

prepare = { shell = """poetry run black && 
                       poetry run isort && 
                       poetry run pflake8 && 
                       poetry run toml-sort && 
                       poetry run mypy . """}

test = { shell = "poetry run pytest --pspec -p no:warnings --cov-report=xml --cov-report=term-missing --cov-fail-under=100 --junitxml=.pytest_cache/pytest-report.xml --verbose --verbosity=9 --cache-clear --rootdir='.' --cov={{cookiecutter.project_name}} && sed -i \"s#$(pwd)#.#g\" coverage.xml" }
test-watch = { shell = "poetry run ptw test/ -- --cov-report=term-missing --cov={{cookiecutter.project_name}}" }
test-lint = { shell = "pytest --mypy --black" }

install-self = { shell = "poetry run pip install ./dist/$(ls ./dist | grep .whl | tail -n 1) --force-reinstall" }
uninstall-self = { shell = "poetry run pip uninstall {{cookiecutter.project_name}}" }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
python_files = ["*test*.py"]
python_functions = ["test"]
minversion = "6.0"
testpaths = ["test"]
bdd_features_base_dir = "./test/bdd/features"
markers = [
    "bdd: marks tests as bdd (deselect with '-m \"not bdd\"')",
    "unit: marks tests as unit (deselect with '-m \"not unit\"')",
]

[tool.coverage.run]
omit = ['*test*']

[tool.mypy]

files = ["src","test"]
warn_return_any = true
warn_unused_configs = true

# Functions should be typed
# ; disallow_untyped_defs = true
# ; disallow_incomplete_defs = true
# ; disallow_untyped_decorators = true

warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

show_column_numbers = true
ignore_missing_imports = true

[tool.black]
line-length = 100

[tool.flake8]
ignore = ["E203", "E266", "E501", "W503", "F403", "F401"]
max-line-length = 100
max-complexity = 18
select = ["B","C","E","F","W","T4","B9"]

[tool.poetry.dependencies]
python = "{{cookiecutter.python_version}}"


[tool.poetry.dev-dependencies]
# Formatting and Typing
black = { version = "*", allow-prereleases = true }
pyproject-flake8 = "*"
mypy = "^0.942"

toml-sort = "*"
isort = "*"


# Expect Pattern Testing
expects = "^0.9.0"

# Pytest: Unit Testing
pytest = "^6.0.0"
pytest-watch = "^4.2.0"
pytest-describe = "^2.0.0"
pytest-describe-it = "^0.1.0"

# Pytest: Coverage
pytest-cov = "^3.0.0"

# Pytest: BDD
pytest-bdd = "^5.0.0"

# Pytest: Pretty
pytest-pspec = "^0.0.4"
pytest-clarity = "^1.0.0"

# Formatting and Typing
pytest-black = "^0.3.0"
pytest-mypy = "^0.9.0"

# Task Runner
poethepoet = "*"

# CI
pre-commit = "*"
