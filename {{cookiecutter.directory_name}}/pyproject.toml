[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.description}}"
authors = ["{{cookiecutter.author}} <{{cookiecutter.email}}>"]
license = "{{cookiecutter.license}}"
repository = 'https://github.com/petereon/{{cookiecutter.project_name}}'
readme = 'README.md'
keywords = ["python"]
classifiers = ['License :: OSI Approved :: {{cookiecutter.license}} License', 'Programming Language :: Python :: 3']
packages = [{ include = "{{cookiecutter.project_name}}", from = "src" }]


[tool.poe.tasks]
init = { shell = "pre-commit install --install-hooks -t commit-msg -t pre-push -t pre-commit" }
add = { shell = "poetry add" }
install = { shell = "poetry install" }
build = { shell = "poetry build" }
clean = { shell = "rm -R ./dist .pytest_cache .mypy_cache &> /dev/null" }

isort = { shell = "poetry run isort ./src" }
black = { shell = "poetry run black ./src/" }
mypy = { shell = "poetry run mypy ./src/" }
flake8 = {shell = "poetry run pflake8 ./src/"}
lint = { shell = """poetry run isort ./src && echo '\nBlack:' && poetry run black ./src/ && echo '\nMyPy:' && poetry run mypy ./src/ && echo '\nFlake8:' && poetry run pflake8 ./src/ && poetry run pymarkdownlint """}

test = { shell = "poetry run pytest --pspec -p no:warnings --cov-report=xml --cov-report=term-missing --cov-fail-under=100 --junitxml=.pytest_cache/pytest-report.xml --verbose --verbosity=9 --cache-clear --rootdir='.' --cov={{cookiecutter.project_name}} && sed -i \"s#$(pwd)#.#g\" coverage.xml" }
test-watch = { shell = "poetry run ptw test/ -- --cov-report=term-missing --cov={{cookiecutter.project_name}}" }

save = "sh ./scripts/save.sh"

install-self = { shell = "poetry run pip install ./dist/$(ls ./dist | grep .whl | tail -n 1) --force-reinstall" }
uninstall-self = { shell = "poetry run pip uninstall {{cookiecutter.project_name}}" }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
python_files = ["*test*.py"]
python_functions = ["test"]
minversion = "6.0"
testpaths = ["test"]
bdd_features_base_dir = "./test/bdd/features"
markers = ["bdd: marks tests as bdd (deselect with '-m \"not bdd\"')","unit: marks tests as unit (deselect with '-m \"not unit\"')"]


[tool.coverage.run]
omit = ['*test*']

[tool.mypy]
files = ["src","test"]

error_summary = true

warn_return_any = true
warn_no_return = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

disallow_untyped_defs = true
disallow_incomplete_defs = true

show_column_numbers = true
show_error_context = true

ignore_missing_imports = true

[tool.black]
line-length = 140

[tool.isort]
profile = "black"

[tool.flake8]
ignore = ["E203", "E266", "E501", "W503", "F403", "F401"]
max-line-length = 140
max-complexity = 18
select = ["B","C","E","F","W","T4","B9"]


[tool.poetry.dependencies]
python = "{{cookiecutter.python_version}}"


[tool.poetry.dev-dependencies]
# Code Scanning and Formatting
black = { version = "*", allow-prereleases = true }
mypy = "^0.942"
pyproject-flake8 = "*"

## Bugs

flake8-bugbear = "^22.7.1"
flake8-simplify = "^0.19.2"
flake8-pie = "^0.15.0"
flake8-bandit = "^3.0.0"

## Complexity

flake8-cognitive-complexity = "^0.1.0"
flake8-expression-complexity = "^0.0.11"
radon = "^5.1.0"
xenon = "^0.9.0"

## Lints

flake8-quotes = "^3.3.1"
flake8-print = "^5.0.0"
flake8-eradicate = "^1.2.1"
flake8-comments = "^0.1.2"

toml-sort = "*"
isort = "*"

# Expect Pattern Testing
expects = "^0.9.0"

# Pytest: Unit Testing
pytest = "^6.0.0"
pytest-watch = "^4.2.0"
pytest-describe = "^2.0.0"
pytest-describe-it = "^0.1.0"
pytest-mock = "^3.7.0"
mutatest = "*"

# Pytest: Coverage
pytest-cov = "^3.0.0"

# Pytest: BDD
pytest-bdd = "^5.0.0"

# Pytest: Pretty
pytest-pspec = "^0.0.4"
pytest-icdiff = "^0.5"

# Task Runner
poethepoet = "*"

# CI
pre-commit = "*"
detect-secrets = "^1.2.0"
